name: "Grove build step"
description: "Builds the Grove analysis backend and Grove frontend"
inputs:
  grove-repo:
    description: "The repository containing the Grove tool (default: TwoFx/grove)"
    required: false
    default: "TwoFx/grove"
  grove-branch:
    description: "The branch of the Grove repository to use"
    required: false
    default: "master"
  project-path:
    description: "Path to the directory containing the analysis script"
    required: true
  script-name:
    description: "Name of the script to execute with lake exe (default: grove)"
    required: false
    default: "grove"
  frontend-artifact-name:
    description: "Name of the artifact containing the generated HTML report"
    required: false
    default: "grove-frontend"
  invalidated-facts-artifact-name:
    description: "Name of the artifact containing the invalidated facts"
    required: false
    default: "invalidated-facts"
  comment-artifact-name:
    description: "Name of the artifact containing the PR comment text"
    required: false
    default: "pr-comment-text"
  invalidated-file-name:
    description: "Name of the file to compare inside each artifact"
    required: false
    default: "invalidated.json"
  toolchain-id:
    description: "Optional toolchain ID to link"
    required: false
  toolchain-path:
    description: "Optional path to link the toolchain to"
    required: false
  project-ref:
    description: "The ref (branch, tag, or commit) of the user repository to checkout"
    required: false
    default: ""

outputs:
  out-path:
    description: "Path to the generated HTML report directory"
    value: ${{ github.workspace }}/grove-repo/frontend/out
  comment-text:
    description: "The content of the PR comment text"
    value: ${{ steps.diff.outputs.comment-text }}

runs:
  using: "composite"
  steps:
    - name: Install Elan
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh -s -- -y --default-toolchain none
        echo "$HOME/.elan/bin" >> $GITHUB_PATH

    - name: Link custom toolchain
      if: ${{ inputs.toolchain-id != '' && inputs.toolchain-path != '' }}
      shell: bash
      run: elan toolchain link ${{ inputs.toolchain-id }} ${{ inputs.toolchain-path }}

    - name: Checkout user repository
      uses: actions/checkout@v4
      with:
        path: user-repo
        ref: ${{ inputs.project-ref }}

    - name: Extract Grove revision from lake-manifest.json
      id: grove-rev
      shell: bash
      run: |
        MANIFEST_FILE="user-repo/${{ inputs.project-path }}/lake-manifest.json"
        if [ -f "$MANIFEST_FILE" ]; then
          echo "Lake manifest found at $MANIFEST_FILE"
          GROVE_REV=$(jq -r '.packages[] | select(.name == "grove") | .rev' "$MANIFEST_FILE" 2>/dev/null || echo "")
          if [ -n "$GROVE_REV" ] && [ "$GROVE_REV" != "null" ]; then
            echo "Found grove rev: $GROVE_REV"
            echo "grove-ref=$GROVE_REV" >> $GITHUB_OUTPUT
          else
            echo "Grove package not found in manifest, using default branch"
            echo "grove-ref=${{ inputs.grove-branch }}" >> $GITHUB_OUTPUT
          fi
        else
          echo "Lake manifest not found, using default branch"
          echo "grove-ref=${{ inputs.grove-branch }}" >> $GITHUB_OUTPUT
        fi

    - name: Checkout Grove
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.grove-repo }}
        ref: ${{ steps.grove-rev.outputs.grove-ref }}
        path: grove-repo

    - name: Run analysis
      shell: bash
      working-directory: user-repo/${{ inputs.project-path }}
      run: |
        lake exe ${{ inputs.script-name }} --full analysis.json --invalidated invalidated.json

    - name: Copy analysis files to frontend public directory
      shell: bash
      run: |
        mkdir -p grove-repo/frontend/public
        cp user-repo/${{ inputs.project-path }}/analysis.json grove-repo/frontend/public/
        if [ "${{ steps.download-upstream.outcome }}" == "success" ]; then
          cp ${{ github.workspace }}/upstream-invalidated/invalidated.json grove-repo/frontend/public/
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "22"

    - name: Install dependencies
      shell: bash
      working-directory: grove-repo/frontend
      run: npm install

    - name: Download upstream invalidated facts
      uses: actions/download-artifact@v4
      id: download-upstream
      continue-on-error: true
      with:
        name: upstream-${{ inputs.invalidated-facts-artifact-name }}
        path: ${{ github.workspace }}/upstream-invalidated

    - name: Build Grove frontend
      shell: bash
      working-directory: grove-repo/frontend
      env:
        GROVE_DATA_LOCATION: ${{ github.workspace }}/grove-repo/frontend/public/analysis.json
        GROVE_UPSTREAM_INVALIDATED_FACTS_LOCATION: ${{ steps.download-upstream.outcome == 'success' && format('{0}/upstream-invalidated/invalidated.json', github.workspace) || '' }}
      run: npm run build

    - name: Upload Grove frontend
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.frontend-artifact-name }}
        path: grove-repo/frontend/out

    - name: Upload invalidated facts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.invalidated-facts-artifact-name }}
        path: ${{ github.workspace }}/user-repo/${{ inputs.project-path }}/invalidated.json

    - name: Compare upstream and downstream invalidated facts
      id: diff
      shell: bash
      run: |
        if [ "${{ steps.download-upstream.outcome }}" == "success" ]; then
          python ${{ github.action_path }}/../scripts/invalidated_facts_diff.py \
            ${{ github.workspace }}/upstream-invalidated/${{ inputs.invalidated-file-name }} \
            ${{ github.workspace }}/user-repo/${{ inputs.project-path }}/${{ inputs.invalidated-file-name }} > comment.txt
        else
          echo "*Grove: upstream invalidated facts not available*" > comment.txt
        fi

        comment_content=$(cat comment.txt)
        echo "comment-text<<EOF" >> $GITHUB_OUTPUT
        echo "$comment_content" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Upload PR comment text
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.comment-artifact-name }}
        path: comment.txt
